Spring配置文件命名空间：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	
	<!--中间是配置文件部分-->
	
	<bean id="txManager"	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" propagation="NOT_SUPPORTED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:aspect id="***" ref="***"/>
		<aop:pointcut id="***" expression="****" />
	</aop:config>
	
	<!--中间是配置文件部分-->
	
	</beans>
	
	
	
	
一、什么是命名空间
	XML 命名空间 是由国际化资源标识符 (IRI) 标识的 XML 元素和属性集合；该集合通常称作 XML“词汇”。
	在XML中，元素名称是由开发者定义的，当两个不同的文档使用相同的元素名时，就会发生命名冲突。
	举个简单的栗子，命名空间很像 Java 中的包，不同的包下面可以存放相同的类名，只要在引入类时前面加上类的包就可以避免
	同名类的冲突。
二、声明和应用XML中的命名空间
	命名空间被声明为元素的属性。并不一定只在根元素声明命名空间；而是可以在 XML 文档中的任何元素中进行声明。声明的命名
	空间的范围起始于声明该命名空间的元素，并应用于该元素的所有内容，直到被具有相同前缀名称的其他命名空间声
	明覆盖，其中，元素内容是指该元素的 <opening-tag> 和 </closing-tag> 之间的内容。
	例如：上面的命名空间是在 <beans> </beans>元素中声明的，所有其中声明的命名空间在这两个标签中有效。
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:类似于一个保留字，它只用于声明命名空间。换言之，xmlns 用于绑定命名空间，
	但其本身并不绑定到任何命名空间。
	aop:这里实际上是将前缀“aop”与命名空间"http://www.springframework.org/schema/aop"(这个网页包含关于命名空间的信息)绑定
	在一起。通常我们会用一个比较简短或约定俗成的名字来作为命名空间的前缀（例如这里的aop），但具体使用什么前缀
	完全取决于个人.自定义命名空间的前缀是合法的。使用有意义的命名空间前缀增强了XML档的清晰性。
	所以可以看到我们平时在配置Spring配置文件的时候，前缀名都是aop（切面）、tx（事务）等命名方式。
	
	配置了前缀后，我们使用命名空间前缀如下：
	
		<aop:config>
			<aop:aspect id="***" ref="***"/>
			<aop:pointcut id="***" expression="****" />
		</aop:config>
	这里我们在配置面向切面编程的内容时，使用aop前缀，代表后面的元素（config，aspect等）都是在http://www.springframework.org/schema/aop
	中定义的。
	请注意，前缀只用作占位符，并且必须通过可以识别命名空间的 XML 分析器进行解释才能使用绑定到该前缀的实际命名空间。
	
	单个默认命名空间
	我们看到，在配置文件中，beans，bean等元素我们是没有使用命名空间前缀的。重复限定一个要在命名空间中使用的元素或属性可能会非常麻烦。
	这种情况下，可以声明一个 默认命名空间。无论在任何时候都只能存在一个 {默认命名空间}。
	声明一个 {默认命名空间} 意味着，如果 {默认命名空间} 声明范围内的任何元素未使用前缀显式限定，则该元素将被隐式限定。与带前缀的命名空间一样，
	{默认命名空间} 也可以被覆盖。
	默认命名空间声明如下：
	xmlns="http://www.springframework.org/schema/beans"
	也就是说，在命名空间范围内，不带有前缀的元素都是在这个命名空间内的，例如这里的<beans> <bean>等，因为比较常用所以就让
	声明他们的命名空间为默认的啦，不用每次写都带前缀。
	
	
	
二、Spring引入命名空间

	spring 整合了各种工具，并且spring提供了对各种工具的xml scheme 的配置方式，简化了开发。
	对于各种工具的xml命名空间的引入，我们也应该有一个比较清楚的认识。
	
	Spring在启动时是要检验XML文件的。如果xml空间存在命名空间内没有的元素是要报错的。
	通常情况下，命名空间对应的URI是一个存放XSD的地址，尽管规范没有这么要求。如果没有
	提供schemaLocation，那么Spring的XML解析器会从命名空间的的URI里加载XSD文件。
	例如我们可以这样写：
	xmlns="http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
	则默认的命名空间就是加载指定的xsd文件。
	
	schemaLocation提供了一个xml 命名空间到对应的XSD(Xml Schema Definition)文件的一个映射，它的值由一个或多个URI引用对组成，
	两个URI之间以空白符分隔（空格和换行均可）。第一个URI是定义的 XML命名空间的值，第二个URI给出Schema文档的实际位置，
	Schema处理器将从这个位置读取Schema文档，该文档的targetNamespace必须与第一个URI(XML命名空间的值)相匹配。截图：
	
	
	所以我们可以看到，
	在xsi:schemaLocation后面配置的字符串都是成对的，前面的是namespace的URI，后面是xsd文件的URI；
	比如我们给出的例子（注意这里已经用了一个命名前缀：xsi，这个xsi是在xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 声明的）：
	xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	
	
三、Spring是如何校验XML
	Spring默认在启动时是要加载XSD文件来验证xml文件的，所以如果有的时候断网了，或者一些开源软件切换域名，那么就很容易碰到应用启动不了。
	为了防止这种情况，Spring提供了一种机制，默认从本地加载XSD文件。
	spring-context-3.2.0.RELEASE.jar中的META_INF文件夹可以看到里面有两个特别的文件：
	spring.handlers
	截图。。。。aop
	
	同时打开org/springframework/context/config可以看到。。。。aop把。。
	
	
	