　　目前主要使用是在jar包的控制上

　　原理：

　　　　在本地，指定一个文件夹，便是maven的仓库，maven会从远程的中央仓库中下载你需要的jar资源到你本地，然后通过maven关联，讲jar包依赖到你的项目中，避免了你需要将jar包拷贝到lib中，并通过classpath引入这些jar包的工作。

　　使用优点：

方便添加项目依赖的jar包，比如，你需要使用spring-mvc，那么，你必须引入spring-mvc及其相关的所有jar包到项目中，有时不同版本对依赖的jar包的版本是不同的，所以需要查看jar包的说明去引入对应版本号的jar文件。这看起来似乎太痛苦了。而maven在你引入使用的jar包时，便会为你引入它所依赖的所有jar包，连版本库都不用你考虑了。
方便控制jar包的版本，及各个jar包的依赖。比如，你使用spring框架时，开发过程中，可能发现各个版本的不同，而需要修改版本时，拷贝jar包到lib下的方法费时费力，而在maven的pom文件中直接修改版本号 ，maven便会帮你修改项目引用的jar包依赖。
　　就这两点理由足够你选择maven进行jar包的版本管理了。当然，maven还可以将你的项目工程编译成jar包放入到版本库中，供别的项目依赖。其他功能，我还没有使用到，以后用到再进行添加。

　　安装使用：

　　　　下载maven，存放在固定文件夹下，并配置环境变量：%M2_HOME%\bin

　　　　cmd进入控制台，mvn -version，查看是否配置成功。

　　默认情况下，maven的配置信息有两种级别：用户级别、全局级别

　　1.用户级别：只为某一个用户而设置，通常在${user.home}/.m2/settings.xml中进行设置。maven安装后，该文件夹中并没有这个xml文件，maven只是使用了默认配置，可以去maven的apache-maven-3.2.3\conf文件夹下，拷贝settings.xml文件到上述文件夹中，并修改相应的配置信息。

　　2.全局级别：用来为该机器上的所有用户进行设置，假设他们都使用同样的maven安装程序。通常在${maven.home}/conf/settings.xml中进行设置。