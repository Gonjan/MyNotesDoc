github同步简单实现步骤：
	在github上创建一个远程仓库后，需要在本地创建一个本地仓库与远程仓库对应。
	比如，在github上创建了一个名为Test的仓库（这个Test仓库就是远程仓库），一般来说，创建这个远程仓库就是为了将本地的工程（或者文件）保存到这个远程仓库里。那么，现在需要创建一个本地仓库与远程仓库相对应（在这个地方，这个本地仓库是必须的，我们不能将文件直接就提交到远程仓库，我们将文件先存放本地仓库，然后再将本地仓库复制到远程仓库里保存，这里简单理解为将本地内容在github上备份了一次。）在将文件从远程仓库文件拉到本地（复制到本机），也是先拉到本地仓库？然后干了什么事儿？？
	
	


一、GitHub创建远程仓库
	1，手动在github网站上创建
	2，用命令行在gitbash中创建
	3，在githubdesktop上创建

二、创建本地git仓库
	1，在需要同步的文件下创建本地仓库。。。
	2，将.git文件copy到需要提交的项目的根目录下
	
	
三、本地仓库与远程仓库的关联
	1、
	->本地git init 
	-> github创建远程仓库 
	-> git remote add origin 远程仓库地址 
	-> git push -u origin master
	
	2、clone远程仓库
	->github创建远程仓库
	->本地需要托管的文件根目录：git clone 远程仓库地址
	->将.git文件放到需要托管的根目录下
	
	
三、提交（同步到github）与同步到本地
    1，提交
		
	2，同步到本地
	
四、github中的分支问题	



	
git push时：

Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.



git 常用命令
<a>github的提交方式 
     （1）git add .--------------------存储到本地 
         git commit -m 'message'-------存储时的标记（修改了哪些地方，方便下次查询） 
         git pull------------------------下载服务器代码 
         git push------------------------上传代码至服务器 
  <b>svn服务器的提交方式 
   （1）git add .  ------------------存储到本地 
        git commit -m 'message'--------存储时的标记（修改了哪些地方，方便下次查询） 
        git svn rebase------------------下载服务器代码 
        git svn dcommit-----------------上传代码至服务器 
   <c>其他相关的git命令 
（1）git branch-------------------查看当前属于哪个分支 
    1、只有冲突存在时才会修改分支——改为冲突再git add . 
    2、git rebase –-continue-------------------自动合并 
    3、git checkout –b svn 新建分支名----------新建分支存储现有文件 
    4、git branch-------------------------------查看在哪个分支下 
    5、git checkout master----------------------将其放到master分支下 
    6、git merge-------------------------------整合分支 
    7、git branch -d 分支名----------------------删除分支 
（2）git checkout + 上传的commit编号-----------将本地代码恢复到此状态 
（3）git log------------------------------------查看本地git上传日志 
（4）git log -p app/controllers/grids_controller.rb----查看某个文件的修改历史 
（5）git checkout d0eb6ef3afe8a377943d3cf6f1e9c320c18f6f32 
     app/controllers/charts_controller.rb-----------返回到这个版本的文件（重现错误） 
（6）git diff ＋ commit编号--------------------------查询不同代码


